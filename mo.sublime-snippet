<snippet>
	<content><![CDATA[
struct MoAlgorithm {

	struct Query {
		int l, r, idx;
	};

	int n, q, block_size, currentDistinct;
	vector<int> arr, answer, freq;
	vector<Query> queries;

	MoAlgorithm(int n, int q, const vector<int>& arr) : n(n), q(q), arr(arr), freq(1000001, 0), currentDistinct(0) {
		block_size = static_cast<int>(sqrt(n));
		answer.resize(q);
	}

	void addQuery(int l, int r, int idx) {
		queries.push_back({l, r, idx});
	}

	void process() {
		sort(queries.begin(), queries.end(), [this](const Query & a, const Query & b) {
			if (a.l / block_size != b.l / block_size)
				return a.l < b.l;
			return (a.l / block_size) % 2 ? (a.r < b.r) : (a.r > b.r);
		});

		int curL = 0, curR = -1;
		for (const auto &query : queries) {
			while (curL > query.l) add(--curL);
			while (curR < query.r) add(++curR);
			while (curL < query.l) remove(curL++);
			while (curR > query.r) remove(curR--);

			answer[query.idx] = currentDistinct;
		}
	}

	vector<int> getAnswers() const {
		return answer;
	}

private:
	void add(int idx) {
		if (++freq[arr[idx]] == 1) ++currentDistinct;
	}

	void remove(int idx) {
		if (--freq[arr[idx]] == 0) --currentDistinct;
	}
};
/*
	MoAlgorithm mo(n, q, arr);
	mo.addQuery(l - 1, r - 1, i);
	mo.process();
	vector<int> answers = mo.getAnswers();
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mo</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
