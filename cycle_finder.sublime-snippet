<snippet>
	<content><![CDATA[
// not tested yet
class CycleFinder {
private:
  vector<int> arr;
  vector<int> res;
  vector<int> cycle_size;

  void fill_up(int curr, int first_cycle) {
    while (curr != first_cycle) {
      res[curr] = res[first_cycle];
      cycle_size[curr] = cycle_size[first_cycle];
      curr = arr[curr];
    }
  }

  void detect_cycle(int curr) {
    int slow = curr, fast = arr[curr];
    while (true) {
      if (res[slow] != -1) {
        fill_up(curr, slow);
        return;
      }
      if (res[fast] != -1 || res[arr[fast]] != -1) {
        fill_up(curr, fast);
        return;
      }
      slow = arr[slow];
      fast = arr[arr[fast]];
      if (slow == fast) break;
    }

    int cycle_start = slow;
    vector<int> cycle_nodes;
    do {
      cycle_nodes.push_back(slow);
      slow = arr[slow];
    } while (slow != cycle_start);

    int cycle_count = cycle_nodes.size();
    for (int node : cycle_nodes) {
      res[node] = node;
      cycle_size[node] = cycle_count;
    }

    slow = curr;
    while (res[slow] == -1) {
      res[slow] = cycle_start;
      cycle_size[slow] = cycle_count;
      slow = arr[slow];
    }
  }

public:
  CycleFinder(int n) : arr(n + 1), res(n + 1, -1), cycle_size(n + 1, -1) {}

  void add_edge(int u, int v) {
    arr[u] = v;
  }

  void find_cycles(int n) {
    for (int i = 1; i <= n; i++) {
      if (res[i] == -1) {
        detect_cycle(i);
      }
    }
  }

  vector<int> get_cycle_sizes() {
    return cycle_size;
  }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>CYCLE_FINDER</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
