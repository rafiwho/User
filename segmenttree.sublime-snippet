<snippet>
	<content><![CDATA[
template <typename T>
struct SegTree {
  vector<T> t;
  int n;
  T id;

  SegTree(int sz, T idv) : n(sz), id(idv) { t.assign(n << 2, id); }

  SegTree(const vector<T> &v, T idv) : id(idv) {
    n = v.size();
    t.assign(n << 2, id);
    build(v, 1, 0, n - 1);
  }

  T mrg(T a, T b) { return a + b; }

  void build(const vector<T> &v, int x, int st, int en) {
    if (st == en) {
      t[x] = v[st];
      return;
    }
    int m = (st + en) / 2;
    build(v, x << 1, st, m);
    build(v, x << 1 | 1, m + 1, en);
    t[x] = mrg(t[x << 1], t[x << 1 | 1]);
  }

  void upd(int x, int st, int en, int i, T v) {
    if (st == en) {
      t[x] = v;
      return;
    }
    int m = (st + en) / 2;
    if (i <= m)
      upd(x << 1, st, m, i, v);
    else
      upd(x << 1 | 1, m + 1, en, i, v);
    t[x] = mrg(t[x << 1], t[x << 1 | 1]);
  }

  T qry(int x, int st, int en, int l, int r) {
    if (l > en || r < st)
      return id;
    if (l <= st && en <= r)
      return t[x];
    int m = (st + en) / 2;
    return mrg(qry(x << 1, st, m, l, r), qry(x << 1 | 1, m + 1, en, l, r));
  }

  void upd(int i, T v) { upd(1, 0, n - 1, i, v); }

  T qry(int l, int r) { return qry(1, 0, n - 1, l, r); }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>RMQ</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
