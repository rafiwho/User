<snippet>
	<content><![CDATA[
template <typename T> struct SegmentTree {
  vector<T> t;
  int n;
  T identity;

  SegmentTree(int size, T identityValue) : n(size), identity(identityValue) {
    t.assign(n << 2, identity);
  }

  SegmentTree(const vector<T> &values, T identityValue)
    : identity(identityValue) {
    n = values.size();
    t.assign(n << 2, identity);
    build(values, 1, 0, n - 1);
  }

  T mrge(T &a, T &b) { return a + b; }

  void build(const vector<T> &values, int node, int start, int end) {
    if (start == end) {
      t[node] = values[start];
      return;
    }
    int mid = (start + end) / 2;
    build(values, node << 1, start, mid);
    build(values, node << 1 | 1, mid + 1, end);
    t[node] = mrge(t[node << 1], t[node << 1 | 1]);
  }

  void update(int node, int start, int end, int idx, T value) {
    if (start == end) {
      t[node] = value;
      return;
    }
    int mid = (start + end) / 2;
    if (idx <= mid)
      update(node << 1, start, mid, idx, value);
    else
      update(node << 1 | 1, mid + 1, end, idx, value);
    t[node] = mrge(t[node << 1], t[node << 1 | 1]);
  }

  T query(int node, int start, int end, int left, int right) {
    if (left > end || right < start)
      return identity;
    if (left <= start && end <= right)
      return t[node];
    int mid = (start + end) / 2;
    T l_query = query(node << 1, start, mid, left, right);
    T r_query = query(node << 1 | 1, mid + 1, end, left, right);
    return mrge(l_query, r_query);
  }

  void update(int idx, T value) { update(1, 0, n - 1, idx, value); }

  T query(int left, int right) { return query(1, 0, n - 1, left, right); }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>RMQ</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
