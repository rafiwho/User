<snippet>
	<content><![CDATA[
template<typename T>
struct EulerTourTree {
	int n;
	vector<vector<int>> adj;
	vector<int> in, out, depth, parent;
	vector<T> segtree, lazy;
	int timer;
	function<T(T, T)> combine;
	T identity;

	EulerTourTree(int nodes, function<T(T, T)> combine_func, T identity_element)
		: n(nodes), adj(nodes), in(nodes), out(nodes), depth(nodes, 0),
		  parent(nodes, -1), segtree(4 * nodes, identity_element), lazy(4 * nodes, 0),
		  timer(0), combine(combine_func), identity(identity_element) {}

	void add_edge(int u, int v) {
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	void dfs(int u, int p) {
		parent[u] = p;
		in[u] = timer++;
		for (int v : adj[u]) {
			if (v != p) {
				depth[v] = depth[u] + 1;
				dfs(v, u);
			}
		}
		out[u] = timer;
	}

	void push(int node, int l, int r) {
		if (lazy[node] != 0) {
			segtree[node] += lazy[node] * (r - l);
			if (l + 1 < r) {
				lazy[2 * node + 1] += lazy[node];
				lazy[2 * node + 2] += lazy[node];
			}
			lazy[node] = 0;
		}
	}

	void range_update(int node, int l, int r, int ql, int qr, T delta) {
		push(node, l, r);
		if (l >= qr || r <= ql) return;
		if (l >= ql && r <= qr) {
			lazy[node] += delta;
			push(node, l, r);
			return;
		}
		int mid = (l + r) / 2;
		range_update(2 * node + 1, l, mid, ql, qr, delta);
		range_update(2 * node + 2, mid, r, ql, qr, delta);
		segtree[node] = combine(segtree[2 * node + 1], segtree[2 * node + 2]);
	}

	void update(int idx, T value) {
		range_update(0, 0, n, idx, idx + 1, value - query(idx, idx + 1));
	}

	T query(int node, int l, int r, int ql, int qr) {
		push(node, l, r);
		if (l >= qr || r <= ql) return identity;
		if (l >= ql && r <= qr) return segtree[node];
		int mid = (l + r) / 2;
		return combine(query(2 * node + 1, l, mid, ql, qr),
		               query(2 * node + 2, mid, r, ql, qr));
	}

	T query(int l, int r) {
		return query(0, 0, n, l, r);
	}

	void update_subtree(int u, T delta) {
		range_update(0, 0, n, in[u], out[u], delta);
	}

	T query_subtree(int u) {
		return query(in[u], out[u]);
	}

	void update_path(int u, int v, T delta) {
		while (depth[u] > depth[v]) {
			update(in[u], query(in[u], in[u] + 1) + delta);
			u = parent[u];
		}
		while (depth[v] > depth[u]) {
			update(in[v], query(in[v], in[v] + 1) + delta);
			v = parent[v];
		}
		while (u != v) {
			update(in[u], query(in[u], in[u] + 1) + delta);
			update(in[v], query(in[v], in[v] + 1) + delta);
			u = parent[u];
			v = parent[v];
		}
		update(in[u], query(in[u], in[u] + 1) + delta);
	}

	void initialize(int root = 0) {
		dfs(root, -1);
	}
};

// Example usage:
// EulerTourTree<int> ett(5, [](int a, int b) { return a + b; }, 0);
// ett.add_edge(0, 1);
// ett.initialize();
// ett.update(ett.in[1], 5);  // Update node 1's value to 5
// ett.update_subtree(1, 3);  // Update the entire subtree rooted at node 1 with +3
// ett.update_path(3, 4, 2);  // Update values along the path from node 3 to node 4

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ETT</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
