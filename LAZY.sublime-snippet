<snippet>
	<content><![CDATA[
template <typename T>
struct LP {
    vector<T> tree, lazy;
    int n;

    LP(int size) : n(size) {
        tree.assign(n << 2, 0);
        lazy.assign(n << 2, 0);
    }

    LP(const vector<T>& values) {
        n = values.size();
        tree.assign(n << 2, 0);
        lazy.assign(n << 2, 0);
        build(1, 0, n - 1, values);
    }

    void push(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node] * (end - start + 1);
            if (start != end) {
                lazy[node << 1] += lazy[node];
                lazy[node << 1 | 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }

    T mrg(T &a, T &b) {
        return a + b;
    }

    void build(int node, int start, int end, const vector<T>& values) {
        if (start == end) {
            tree[node] = values[start];
        } else {
            int mid = (start + end) / 2;
            build(node << 1, start, mid, values);
            build(node << 1 | 1, mid + 1, end, values);
            tree[node] = mrg(tree[node << 1], tree[node << 1 | 1]);
        }
    }

    void update(int node, int start, int end, int l, int r, T val) {
        push(node, start, end);
        if (start > r || end < l) return;
        if (start >= l && end <= r) {
            lazy[node] += val;
            push(node, start, end);
            return;
        }
        int mid = (start + end) / 2;
        update(node << 1, start, mid, l, r, val);
        update(node << 1 | 1, mid + 1, end, l, r, val);
        tree[node] = mrg(tree[node << 1], tree[node << 1 | 1]);
    }

    T query(int node, int start, int end, int l, int r) {
        push(node, start, end);
        if (start > r || end < l) return 0;
        if (start >= l && end <= r) return tree[node];
        int mid = (start + end) / 2;
        T left_query = query(node << 1, start, mid, l, r);
        T right_query = query(node << 1 | 1, mid + 1, end, l, r);
        return mrge(left_query, right_query);
    }

    void range_update(int l, int r, T val) {
        update(1, 0, n - 1, l, r, val);
    }

    T range_query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LAZY</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
