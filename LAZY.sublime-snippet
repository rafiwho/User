<snippet>
	<content><![CDATA[
template <typename T>
struct Node {
  T v;
};

template <typename T>
struct SegTree {
  vector<Node<T>> t;
  vector<int> lz;
  int sz;
  T id;
  
  SegTree(const vector<T>& a, T i) : id(i) {
    sz = a.size();
    t.resize(4 * sz);
    lz.assign(4 * sz, 0);
    build(1, 0, sz - 1, a);
  }
  
  Node<T> mrge(const Node<T>& a, const Node<T>& b) {
    return {a.v + b.v};
  }
  
  void push(int n, int s, int e) {
    if (lz[n]) {
      t[n].v += lz[n] * (e - s + 1);
      if (s != e) {
        lz[n << 1] += lz[n];
        lz[n << 1 | 1] += lz[n];
      }
      lz[n] = 0;
    }
  }
  
  void build(int n, int s, int e, const vector<T>& a) {
    if (s == e) t[n].v = a[s];
    else {
      int m = (s + e) >> 1;
      build(n << 1, s, m, a);
      build(n << 1 | 1, m + 1, e, a);
      t[n] = mrge(t[n << 1], t[n << 1 | 1]);
    }
  }
  
  void upd(int n, int s, int e, int l, int r, int val) {
    push(n, s, e);
    if (s > r || e < l) return;
    if (s >= l && e <= r) {
      lz[n] += val;
      push(n, s, e);
      return;
    }
    int m = (s + e) >> 1;
    upd(n << 1, s, m, l, r, val);
    upd(n << 1 | 1, m + 1, e, l, r, val);
    t[n] = mrge(t[n << 1], t[n << 1 | 1]);
  }
  
  Node<T> qry(int n, int s, int e, int l, int r) {
    push(n, s, e);
    if (s > r || e < l) return {id};
    if (s >= l && e <= r) return t[n];
    int m = (s + e) >> 1;
    return mrge(qry(n << 1, s, m, l, r), qry(n << 1 | 1, m + 1, e, l, r));
  }
  
  void range_upd(int l, int r, int val) {
    upd(1, 0, sz - 1, l, r, val);
  }
  
  T range_qry(int l, int r) {
    return qry(1, 0, sz - 1, l, r).v;
  }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LAZY</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
