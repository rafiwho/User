<snippet>
	<content><![CDATA[
template <typename T>
class LazySegmentTree {
    struct Node {
        T value;
        int count; // Optional: can be used for counting occurrences
        Node() : value(T()), count(0) {}
        Node(T v, int c) : value(v), count(c) {}
    };

    vector<Node> tree;
    vector<int> lazy;
    size_t n;
    function<Node(const Node&, const Node&)> merge;
    T identity; // Identity value for the merge operation

    void propagate(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node].value += lazy[node];
            if (start != end) {
                lazy[node << 1] += lazy[node];
                lazy[(node << 1) + 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }

    void build(int node, int start, int end, const vector<T>& values) {
        if (start == end) {
            tree[node] = {values[start], 1};
        } else {
            int mid = (start + end) >> 1;
            build(node << 1, start, mid, values);
            build((node << 1) + 1, mid + 1, end, values);
            tree[node] = merge(tree[node << 1], tree[(node << 1) + 1]);
        }
    }

    void update(int node, int start, int end, int l, int r, int val) {
        propagate(node, start, end);
        if (start > r || end < l) return;
        if (start >= l && end <= r) {
            lazy[node] += val;
            propagate(node, start, end);
            return;
        }
        int mid = (start + end) >> 1;
        update(node << 1, start, mid, l, r, val);
        update((node << 1) + 1, mid + 1, end, l, r, val);
        tree[node] = merge(tree[node << 1], tree[(node << 1) + 1]);
    }

    Node query(int node, int start, int end, int l, int r) {
        propagate(node, start, end);
        if (start > r || end < l) {
            return Node(identity, 0); // Return identity node if out of bounds
        }
        if (start >= l && end <= r) {
            return tree[node];
        }
        int mid = (start + end) >> 1;
        Node q1 = query(node << 1, start, mid, l, r);
        Node q2 = query((node << 1) + 1, mid + 1, end, l, r);
        return merge(q1, q2);
    }

public:
    LazySegmentTree(const vector<T>& values,
                    function<Node(const Node&, const Node&)> mFunc,
                    T id)
        : merge(mFunc), identity(id) {
        n = values.size();
        tree.resize(4 * n);
        lazy.assign(4 * n, 0);
        build(1, 0, n - 1, values);
    }

    void range_update(int l, int r, int val) {
        update(1, 0, n - 1, l, r, val);
    }

    T range_query(int l, int r) {
        return query(1, 0, n - 1, l, r).value;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LAZY</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
